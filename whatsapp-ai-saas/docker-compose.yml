# docker-compose.yml  (no top-level "version:" key)

services:
  db:
    image: postgres:15-alpine
    container_name: wa_db
    environment:
      POSTGRES_DB: whatsappdb
      POSTGRES_USER: wa_saas_user
      POSTGRES_PASSWORD: smileplz
    ports:
      - "5433:5432"   # host:container
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wa_saas_user -d whatsappdb"]
      interval: 5s
      timeout: 3s
      retries: 15

  redis:
    image: redis:7-alpine
    container_name: wa_redis
    ports:
      - "6379:6379"

  server:
    container_name: wa_server
    build:
      context: ./server            # IMPORTANT: point at the folder containing Dockerfile + requirements.txt
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://wa_saas_user:smileplz@db:5432/whatsappdb
      REDIS_URL: redis://redis:6379/0
      CHROMA_PATH: /data/chroma
      WEBHOOK_QUEUE: wh_inbound_queue
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - ./data/chroma:/data/chroma  # make sure this folder exists on host

  worker:
    container_name: wa_worker
    build:
      context: ./server            # reuse the same image as server
      dockerfile: Dockerfile
    command: python -m server.workers.webhook_worker
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://wa_saas_user:smileplz@db:5432/whatsappdb
      REDIS_URL: redis://redis:6379/0
      WEBHOOK_QUEUE: wh_inbound_queue
      CHROMA_PATH: /data/chroma
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      server:
        condition: service_started
    volumes:
      - ./data/chroma:/data/chroma

volumes:
  db_data:
